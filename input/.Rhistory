athletes <- ofCloudGetAthletes(token)
athletes_in_activity <- ofCloudGetAthletesInActivity(token, activity_id = activities$id[1])
device_in_activity <- ofCloudGetAthleteDevicesInActivity(token, activity_id = activities$id[1])
periods <- ofCloudGetPeriods(credentials = token, activity_id = activities$id[1])
periodID <- periods$id[]
# all athletes in activity
sd_all <- ofCloudGetActivitySensorDataEx(
token,
athlete_id = device_in_activity$athlete_id,
activity_id = activities$id[1])
sd_all_unnested <- bind_rows(sd_all) %>%
unnest(col = "data")
View(sd_all)
rm(list = ls(all.names = TRUE))
### POWER BI FILES
library(catapultR)
library(tidyverse)
library(lubridate)
library(rio)
library(tidyverse)
library(ggplot2)
rm(list = ls(all.names = TRUE))
#Read dataset using rio
data = import("http://users.jyu.fi/~slahola/files/ylm1_datoja/Health.txt")
data = data %>%
mutate(HBad = ifelse(Hstatus == 3, 1, 0)) %>%
select(HBad, Age, Sex, Mstatus) %>%
mutate(
Sex = factor(Sex, labels = c("Male", "Female")),
Mstatus = factor(Mstatus, labels = c("In relationship", "Single", "Separated", "Widowed"))
)
data = data %>%
mutate(Age30 = Age-30)
log_model = glm(HBad ~ Age30, data = data, family = binomial(link = "logit"))
summary(log_model)
# extract coefficients
b = coef(log_model)
# define the logistic function like in the examples
invlogit = function(x) { exp(x) / (1 + exp(x)) }
# calculate probabilities at age 30 and 40
prob_age_30 = invlogit(b[1])
prob_age_30
prob_age_40 = invlogit(b[1] + b[2] * 10)
prob_age_40
# compare people with 1 year age difference
base_age = 30
prob_age_diff = invlogit(b[1] + b[2] * ((base_age + 1) - 30)) - invlogit(b[1] + b[2] * (base_age - 30))
prob_age_diff
# compare people with 10 year age difference
prob_age_diff_10 = invlogit(b[1] + b[2] * ((base_age + 10) - 30)) - invlogit(b[1] + b[2] * (base_age - 30))
prob_age_diff_10
# List all possible values of "age" and sort them
Age = sort(unique(data$Age))
# List all possible values of "age" and sort them
Age = sort(unique(data$Age))
plot(Age, invlogit(b[1] + b[2] * (Age - 30)), type = "l", col = "blue", xlab = "Age",
ylab = "Bad health status")
# Between 20 and 30
linpred_20 = b[1] + b[2] * (20 - 30)
linpred_30 = b[1] + b[2] * (30 - 30)
phat20 = invlogit(linpred_20)
phat30 = invlogit(linpred_30)
prob_diff_20_30 = phat30 - phat20
prob_diff_20_30
# Between 40 and 30
linpred_30 = b[1] + b[2] * (30 - 30)
linpred_40 = b[1] + b[2] * (40 - 30)
phat30 = invlogit(linpred_30)
phat40 = invlogit(linpred_40)
prob_diff_30_40 = phat40 - phat30
prob_diff_30_40
# Between 50 and 40
linpred_40 = b[1] + b[2] * (40 - 30)
linpred_50 = b[1] + b[2] * (50 - 30)
phat40 = invlogit(linpred_40)
phat50 = invlogit(linpred_50)
prob_diff_40_50 = phat50 - phat40
prob_diff_40_50
# 7. Interpret the results of your modeling using odds and odds ratio.
prob_at_30 = invlogit(b[1])
odds_at_30 = exp(b[1])
odds_ratio_one_year = exp(b[2])
odds_ratio_ten_years = exp(10 * b[2])
odds_ratio_one_year
odds_ratio_ten_years
# extract coefficients
b = coef(log_model_extended)
invlogit = function(x) { exp(x) / (1 + exp(x)) }
linpred_45_female = b[1] + b[2] * 15 + b[3] * 2 + b[4] * 1
prob_45_female = invlogit(linpred_45_female)
prob_45_female
log_model_extended = glm(HBad ~ Age30 + Sex + Mstatus, data = data, family = binomial(link = "logit"))
summary(log_model_extended)
# extract coefficients
b = coef(log_model_extended)
invlogit = function(x) { exp(x) / (1 + exp(x)) }
linpred_45_female = b[1] + b[2] * 15 + b[3] * 2 + b[4] * 1
prob_45_female = invlogit(linpred_45_female)
prob_45_female
linpred_60_male = b[1] + b[2] * 30 + b[3] * 1 + b[4] * 3
prob_60_male = invlogit(linpred_60_male)
prob_60_male
rm(list = ls(all.names = TRUE))
library(rio)
library(tidyverse)
library(ggplot2)
rm(list = ls(all.names = TRUE))
#Read dataset using rio
data = import("http://users.jyu.fi/~slahola/files/ylm1_datoja/Health.txt")
data = data %>%
mutate(HBad = ifelse(Hstatus == 3, 1, 0)) %>%
select(HBad, Age, Sex, Mstatus) %>%
mutate(
Sex = factor(Sex, labels = c("male", "female")),
Mstatus = factor(Mstatus, labels = c("in relationship", "single", "separated", "widowed"))
)
fit1 = glm(Hbad ~ Age + Sex + Mstatus, data = data, family = binomial)
summary(fit1)
fit1 = glm(Hbad ~ Age + Sex + Mstatus, data = data, family = binomial)
data = data %>%
mutate(HBad = ifelse(Hstatus == 3, 1, 0)) %>%
select(HBad, Age, Sex, Mstatus) %>%
mutate(
Sex = factor(Sex, labels = c("male", "female")),
Mstatus = factor(Mstatus, labels = c("in relationship", "single", "separated", "widowed"))
)
fit1 = glm(Hbad ~ Age + Sex + Mstatus, data = data, family = binomial)
summary(fit1)
fit1 = glm(HBad ~ Age + Sex + Mstatus, data = data, family = binomial)
summary(fit1)
View(data)
b = coef(fit1)
exp(b[1])
exp(b[2])
# Mstatus
exp(b[4])
# Sex
exp(b[3])
# Mstatus
exp(b[4])
# Mstatus
exp(b[5])
# Mstatuswidowed
exp(b[6])
# Mstatuswidowed
exp(b[7])
exp(confint(b))
exp(confint(b[1]))
View(data)
View(data)
# for bmi
confint(fit1, "Age", level=0.95)
# for sex
confint(fit1, "sexFemale", level=0.95)
# for sex
confint(fit1, "sexfemale", level=0.95)
# for sex
confint(fit1, "Sex", level=0.95)
View(data)
# for sex
confint(fit1, "Sexmale", level=0.95)
# for sex
confint(fit1, "Sex", level=0.95)
# for sex
confint(fit1, "Mstatus", level=0.95)
# for sex
confint(fit1, "sexFemale", level=0.95)
b = coef(fit1)
exp(b[1])
# Age
exp(b[2])
# Sex
exp(b[3])
exp(b[1])
b = coef(fit1)
exp(b[1])
# Age
exp(b[2])
# Sex
exp(b[3])
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
# or calculating for all
conf_intervals = confint(fit1)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals)
# for bmi
confint(fit1, "Age", level=0.95)
# for Sex
confint(fit1, "Sexfemale", level = 0.95)
# computing 95% CI for the odds
conf_intervals = confint(fit1)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals)
# computing 95% CI for the odds
conf_intervals = confint(fit1)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals)
fit2 = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
# Tutkitaan interaktiotermin merkitsevyytt√§ Q testin avulla
b = coef(fit1)
S = vcov(fit2)
# Q-testisuure
Q <- t(b) %*% solve(S) %*% b
# p-arvo
1 - pchisq(Q, 3)
# Deviance test
d = deviance(fit1) - deviance(fit2)
# P-arvo
1 - pchisq(d, 3)
# Deviance test
d = deviance(fit1) - deviance(fit2)
# P-arvo
1 - pchisq(d, 3)
coef_names <- names(coef(fit2))
print(coef_names)
summary(fit2)
# Q-test
b = coef(fit2)[7:9]
S = vcov(fit2)[7:9,7:9]
Q = t(b) %*% solve(S) %*% b
# p-value
1 - pchisq(Q, 3)
# Deviance test
d = deviance(fit1) - deviance(fit2)
# P-arvo
1 - pchisq(d, 3)
b = coef(fit2)
b = coef(fit2)
exp(b[3])
# Odds ratio for Mstatussingle among males
OR_male_single <- exp(b["Mstatussingle"])
# Mstatussingle
exp(b[4])
# Odds ratio for Mstatussingle among males
OR_male_single <- exp(b["Mstatussingle"])
# Odds ratio for Mstatusseparated among males
OR_male_separated <- exp(b["Mstatusseparated"])
# Odds ratio for Mstatuswidowed among males
OR_male_widowed <- exp(b["Mstatuswidowed"])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
print(b)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
# Mstatussingle
exp(b[7])
# Mstatusseparate
exp(b[8])
# Mstatuswidowed
exp(b[9])
# computing 95% CI for the odds
conf_intervals_2 = confint(fit2)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_2)
# Mstatussingle
exp(b[4])
# Mstatussingle
exp(b[7])
# Mstatusseparate
exp(b[8])
# Mstatuswidowed
exp(b[9])
# Extract coefficients
b <- coef(fit2)
# Coefficient for Sexfemale
beta_sex <- b["Sexfemale"]
beta_single_female <- b["Mstatussingle"] + beta_sex + b["Sexfemale:Mstatussingle"]
OR_single_female <- exp(beta_single_female)
# Coefficient for Sexfemale
b_sex = b["Sexfemale"]
beta_single_female = b["Mstatussingle"] + beta_sex + b["Sexfemale:Mstatussingle"]
exp(beta_single_female)
# Mstatussingle
exp(b[4])
# Mstatussingle
exp(b[7])
beta_single_female = b["Mstatussingle"] + beta_sex + b["Sexfemale:Mstatussingle"]
exp(beta_single_female)
# Coefficient for Sexfemale
b_sex = b["Sexfemale"]
b_single_female = b["Mstatussingle"] + b_sex + b["Sexfemale:Mstatussingle"]
exp(beta_single_female)
b_single_female = b["Mstatussingle"] + b_sex
exp(beta_single_female)
b_sex
b_single_female = b["Mstatussingle"]
b_single_female
b_single_female = b["Mstatussingle"] + b_sex
exp(beta_single_female)
exp(b_single_female)
b_single_female = b["Mstatussingle"] + b_sex + b["Sexfemale:Mstatussingle"]
exp(b_single_female)
b_single_female = b["Mstatussingle"] + b_sex
exp(b_single_female)
b_single_female = b_sex + b["Sexfemale:Mstatussingle"]
exp(b_single_female)
b_separated_female = b["Mstatusseparated"] + b_sex + b["Sexfemale:Mstatusseparated"]
exp(b_separated_female)
b_single_female = b["Mstatussingle"] + b_sex + b["Sexfemale:Mstatussingle"]
exp(b_single_female)
b_separated_female = b["Mstatusseparated"] + b_sex + b["Sexfemale:Mstatusseparated"]
exp(b_separated_female)
b_widowed_female = b["Mstatuswidowed"] + b_sex + b["Sexfemale:Mstatuswidowed"]
exp(b_widowed_female)
# computing 95% CI for the odds
conf_intervals_2 = confint(fit2)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_2)
data$Sex = relevel(data$Sex, ref = "female")
View(data)
# computing 95% CI for the odds
conf_intervals_female = confint(fit_female)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_female)
# make female reference category
data$Sex = relevel(data$Sex, ref = "female")
# fit the new model
fit_female <- glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
# computing 95% CI for the odds
conf_intervals_female = confint(fit_female)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_female)
# computing 95% CI for the odds
conf_intervals_2 = confint(fit2)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_2)
# make female reference category
data$Sex = relevel(data$Sex, ref = "female")
# fit the new model
fit_female <- glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
# computing 95% CI for the odds
conf_intervals_female = confint(fit_female)
# Exponentiate to get confidence intervals for odds ratios
exp(conf_intervals_female)
# Coefficient for Sexfemale
b_sex = b["Sexfemale"]
b_single_female = b["Mstatussingle"] + b_sex + b["Sexfemale:Mstatussingle"]
exp(b_single_female)
b_separated_female = b["Mstatusseparated"] + b_sex + b["Sexfemale:Mstatusseparated"]
exp(b_separated_female)
b_widowed_female = b["Mstatuswidowed"] + b_sex + b["Sexfemale:Mstatuswidowed"]
exp(b_widowed_female)
data$Sex <- relevel(data$Sex, ref = "female")
# Fit the new model with "female" as the reference category
fit_female <- glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
# Compute confidence intervals for the coefficients
conf_intervals_female <- confint(fit_female)
# Exponentiate to get confidence intervals for odds ratios
exp_conf_intervals_female <- exp(conf_intervals_female)
# Print the exponentiated confidence intervals
print(exp_conf_intervals_female)
# Fit the new model with "female" as the reference category
fit_female <- glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
b = coef(fit_female)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
data$Sex <- relevel(data$Sex, ref = "female")
# Fit the new model with "female" as the reference category
fit_female <- glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
b = coef(fit_female)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
fit2 = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
summary(fit2)
b = coef(fit2)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
# make female reference category
data$Sex = relevel(data$Sex, ref = "female")
# fit the new model
fit_female = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
b = coef(fit_female)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
data$Sex = relevel(data$Sex, ref = "male")
fit2 = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
summary(fit2)
# Q-test
b = coef(fit2)[7:9]
S = vcov(fit2)[7:9,7:9]
Q = t(b) %*% solve(S) %*% b
# p-value
1 - pchisq(Q, 3)
# Deviance test
d = deviance(fit1) - deviance(fit2)
# P-arvo
1 - pchisq(d, 3)
b = coef(fit2)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
# make female reference category
data$Sex = relevel(data$Sex, ref = "female")
# fit the new model
fit_female = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
b = coef(fit_female)
b
# Mstatussingle
exp(b[4])
# Mstatusseparate
exp(b[5])
# Mstatuswidowed
exp(b[6])
data$Sex = relevel(data$Sex, ref = "male")
fit2 = glm(HBad ~ Age + Sex * Mstatus, data = data, family = binomial)
resid = residuals(fit2, type = "pearson")
plot(resid ~ fitted(fit2), xlab = "lineaarinen prediktori", ylab = "j√§√§nn√∂kset")
install.packages("statmod")
library(statmod)
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
qqnorm(resid)
abline(0, 1)
resid = residuals(fit2, type = "pearson")
plot(resid ~ fitted(fit2), xlab = "linear predictor", ylab = "residuals")
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
qqnorm(resid)
abline(0, 1)
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
qqnorm(resid)
abline(0, 1)
data$Sex = relevel(data$Sex, ref = "female")
resid = qresiduals(fit2)
plot(resid ~ fitted(fit2))
qqnorm(resid)
abline(0, 1)
# Tidyverse
library(tidyverse)
rm(list = ls(all.names = TRUE))
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
penguins_clean = data %>%
drop_na()
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm))
# Tidyverse
library(tidyverse)
rm(list = ls(all.names = TRUE))
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
# Clean data by removing NA values
penguins_clean <- data %>%
drop_na()
# Compute the mean bill length for Adelie penguins by island
adelie_means <- penguins_clean %>%
filter(species == "Adelie") %>%
group_by(island) %>%
summarize(mean_bill_length = round(mean(bill_length_mm), 2))
# Print the computed means
print(adelie_means)
# Create a plot of bill dimensions by species with ggplot2
ggplot(penguins_clean, aes(x = bill_length_mm, y = bill_depth_mm, color = species, shape = species)) +
geom_point(alpha = 0.5) + # Set transparency to see overlapping points
labs(x = 'Bill Length (mm)', y = 'Bill Depth (mm)', title = 'Penguin Bill Dimensions') +
scale_color_manual(values = c("Adelie" = "red", "Chinstrap" = "green", "Gentoo" = "blue")) +
scale_shape_manual(values = c("Adelie" = 16, "Chinstrap" = 17, "Gentoo" = 18)) +
theme_minimal() +
theme(legend.position = "topright") +
guides(color = guide_legend(title = "Species"), shape = guide_legend(title = "Species"))
install.packages("styler")
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
styler:::style_active_file()
setwd("~/Desktop/productive-r-workflow")
rm(list = ls(all.names = TRUE))
data <- read.csv("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_2.csv")
library(rio)
setwd("~/Desktop/productive-r-workflow/input")
export(data, "data.csv")
getwd()
